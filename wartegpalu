#include<stdio.h>
#include<stdlib.h>
#include<string.h>

//Run Programnya di Visual Studio Code
//Jika di Dev C++ akan mengalami error

void clear_screen() {
#ifdef _WIN32
    system("cls"); 
#else
    system("clear");  
#endif
}

typedef struct {
    char nama[50];
    int harga;
} Menu;

int pilihanSort;
char Konfirmasi;

void sortMenuByPrice(Menu menu[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (menu[j].harga > menu[j + 1].harga) {
                Menu temp = menu[j];
                menu[j] = menu[j + 1];
                menu[j + 1] = temp;
            }
        }
    }
}

void sortMenuByName(Menu menu[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (strcmp(menu[j].nama, menu[j + 1].nama) > 0) {
                Menu temp = menu[j];
                menu[j] = menu[j + 1];
                menu[j + 1] = temp;
            }
        }
    }
}

int compareMenu(const void *a, const void *b) {
    return strcmp(((Menu*)a)->nama, ((Menu*)b)->nama);
}

int binarySearch(Menu daftarMenu[], int size, char key[]) {
    int low = 0, high = size - 1, mid;

    while (low <= high) {
        mid = (low + high) / 2;
        int cmp = strcmp(key, daftarMenu[mid].nama);
        if (cmp == 0)
            return mid;
        else if (cmp < 0)
            high = mid - 1;
        else
            low = mid + 1;
    }
    return -1;
}

Menu daftarMenuNasi[] = {
    {"Nasi Putih", 3000},
    {"Nasi Goreng", 15000},
    {"Nasi Bakar", 10000},
    {"Nasi Kuning", 12000},
    {"Nasi Daun Jeruk", 7000},
    {"Nasi Uduk", 12000},
    {"Nasi Merah", 4000}
};

Menu daftarMenuAyam[] = {
    {"Ayam Goreng", 15000},
    {"Ayam Bakar", 17000},
    {"Ayam Geprek", 15000},
    {"Ayam Tulang Lunak", 15000},
    {"Ayam Pop", 8000}
};

Menu daftarMenuSeafood[] = {
    {"Ikan Goreng", 15000},
    {"Ikan Bakar", 18000},
    {"Ikan Gurame", 23000},
    {"Udang Saus Tiram", 19000}
};

Menu daftarMenuBebek[] = {
    {"Bebek Goreng", 18000},
    {"Bebek Bakar", 20000},
    {"Bebek Panggang", 23000}
};

Menu daftarMenuTahu[] = {
    {"Tahu Goreng", 5000},
    {"Pepes Tahu", 9000}
};

Menu daftarMenuTempe[] = {
    {"Tempe Goreng", 6000},
    {"Tempe Bacem", 8000},
    {"Tempe Orek", 6000}
};

Menu daftarMenuPerkedel[] = {
    {"Perkedel Jagung", 3000},
    {"Perkedel Kentang", 6000}
};

Menu daftarMenuSayur[] = {
    {"Sayur Sop", 12000},
    {"Sayur Asem", 12000},
    {"Soto Palu", 13000},
    {"Sayur Lodeh", 12000}
};

Menu daftarMenuMinuman[] = {
    {"Es Teh Manis", 5000},
    {"Teh Manis Panas", 4000},
    {"Teh Tawar Panas", 2000},
    {"Teh Tawar Dingin", 3000},
    {"Kopi ABC", 5000},
    {"Kopi Susu", 7000},
    {"Red Velvet", 7000},
    {"Matcha", 7000},
    {"Pop Ice All Variants", 5000},
    {"Nutrisari All Variants", 5000},
    {"Air Mineral", 3000}
};

int sizeNasi = sizeof(daftarMenuNasi) / sizeof(daftarMenuNasi[0]);
int sizeAyam = sizeof(daftarMenuAyam) / sizeof(daftarMenuAyam[0]);
int sizeSeafood = sizeof(daftarMenuSeafood) / sizeof(daftarMenuSeafood[0]);
int sizeBebek = sizeof(daftarMenuBebek) / sizeof(daftarMenuBebek[0]);
int sizeTahu = sizeof(daftarMenuTahu) / sizeof(daftarMenuTahu[0]);
int sizeTempe = sizeof(daftarMenuTempe) / sizeof(daftarMenuTempe[0]);
int sizePerkedel = sizeof(daftarMenuPerkedel) / sizeof(daftarMenuPerkedel[0]);
int sizeSayur = sizeof(daftarMenuSayur) / sizeof(daftarMenuSayur[0]);
int sizeMinuman = sizeof(daftarMenuMinuman) / sizeof(daftarMenuMinuman[0]);

int totalHarga = 0; 

void writeReceipt(char orders[], int total) {
    FILE *receipt = fopen("receipt.txt", "a");
    if (receipt == NULL) {
        printf("\nError: Could not create receipt file.\n");
        return;
    }
    fprintf(receipt, "============================\n");
    fprintf(receipt, "      WARTEG PALU RECEIPT\n");
    fprintf(receipt, "============================\n");
    fprintf(receipt, "%s", orders); 
    fprintf(receipt, "\nTotal Harga: Rp%d\n", total); 
    fprintf(receipt, "\nTerima kasih telah memesan!\n");
    fclose(receipt);
    printf("\nBukti pesanan telah dibuat: receipt.txt\n");
}

int main(){
    qsort(daftarMenuNasi, sizeNasi, sizeof(Menu), compareMenu);
    qsort(daftarMenuAyam, sizeAyam, sizeof(Menu), compareMenu);
    qsort(daftarMenuSeafood, sizeSeafood, sizeof(Menu), compareMenu);
    qsort(daftarMenuBebek, sizeBebek, sizeof(Menu), compareMenu);
    qsort(daftarMenuTahu, sizeTahu, sizeof(Menu), compareMenu);
    qsort(daftarMenuTempe, sizeTempe, sizeof(Menu), compareMenu);
    qsort(daftarMenuPerkedel, sizePerkedel, sizeof(Menu), compareMenu);
    qsort(daftarMenuSayur, sizeSayur, sizeof(Menu), compareMenu);
    qsort(daftarMenuMinuman, sizeMinuman, sizeof(Menu), compareMenu);
    int menuKategori, subMenu, totalHarga = 0;
    char orders[1000] = "";
    char Konfirmasi;
    char receipt[1000] = "";

    do {
        clear_screen();
        printf(" __      __  ______  ____    ______  ____    ____      \n");
        printf("/\\ \\  __/\\ \\ /\\  _  \\ /\\  _`\\ /\\__  _\\/\\  _`\\ /\\  _`\\    \n");
        printf("\\ \\ \\/\\ \\ \\ \\ \\ \\L\\ \\ \\ \\L\\ \\/_/\\ \\/\\ \\ \\L\\_\\ \\ \\L\\_\\  \n");
        printf(" \\ \\ \\ \\ \\ \\ \\ \\  __ \\ \\ ,  /  \\ \\ \\ \\ \\  _\\L\\ \\ \\L_L  \n");
        printf("  \\ \\ \\_/ \\_\\ \\ \\ \\/\\ \\ \\ \\\\ \\  \\ \\ \\ \\ \\ \\L\\ \\ \\ \\/, \\ \n");
        printf("   \\ `\\___x___/\\ \\_\\ \\_\\ \\_\\ \\_\\ \\ \\_\\ \\ \\____/\\ \\____/ \n");
        printf("    '\\/__//__/  \\/_/\\/_/\\/_/\\_/ /  \\/_/  \\/___/  \\/___/  \n");
        printf("                                                       \n");
        printf("                                                       \n");
        printf(" ____    ______  __       __  __                       \n");
        printf("/\\  _`\\ /\\  _  \\ /\\ \\     /\\ \\/\\ \\                      \n");
        printf("\\ \\ \\L\\ \\ \\ \\L\\ \\ \\ \\    \\ \\ \\ \\ \\                     \n");
        printf(" \\ \\ ,__/\\ \\  __ \\ \\ \\  __\\ \\ \\ \\ \\                    \n");
        printf("  \\ \\ \\/  \\ \\ \\/\\ \\ \\ \\L\\ \\\\ \\ \\_\\ \\                   \n");
        printf("   \\ \\_\\   \\ \\_\\ \\_\\ \\____/ \\ \\____\\                   \n");
        printf("    \\/_/    \\/_/\\/_/\\/___/   \\/____/                   \n");
        printf("Selamat Datang di Warteg Palu\n\n");
        printf("Kategori Menu:\n");
        printf("1. Nasi\n");
        printf("2. Ayam\n");
        printf("3. Seafood\n");
        printf("4. Bebek\n");
        printf("5. Tahu\n");
        printf("6. Tempe\n");
        printf("7. Perkedel\n");
        printf("8. Sayur\n");
        printf("9. Minuman\n");
        printf("10. Opsi untuk Searching Makanan\n");
        printf("11. Keluar Aplikasi\n");
        printf("Tolong Pilih Kategori Menu Berdasarkan Nomor: ");
        scanf("%d", &menuKategori);

        switch(menuKategori){
            case 1:
                int jumlahMenuNasi = sizeof(daftarMenuNasi) / sizeof(daftarMenuNasi[0]);
                clear_screen();
                printf("\nApakah Anda ingin mengurutkan menu?\n");
                printf("1. Berdasarkan Harga (Termurah ke Termahal)\n");
                printf("2. Berdasarkan Nama (A-Z)\n");
                printf("3. Tidak Perlu Sorting\n");
                printf("Masukkan Pilihan: ");
                scanf("%d", &pilihanSort);

                if (pilihanSort == 1) {
                    sortMenuByPrice(daftarMenuNasi, jumlahMenuNasi);
                } else if (pilihanSort == 2) {
                    sortMenuByName(daftarMenuNasi, jumlahMenuNasi);
                }
                do {
                    clear_screen();
                    printf("\nSilahkan Memilih Menu Nasi Berdasarkan Nomor:\n");
                    
                    for (int i = 0; i < jumlahMenuNasi; i++) {
                        printf("%d. %s : Rp%d\n", i + 1, daftarMenuNasi[i].nama, daftarMenuNasi[i].harga);
                    }
                    printf("Tolong Pilih Menu (Ketik 0 Untuk Keluar Kategori): ");
                    scanf("%d", &subMenu);

                    if (subMenu == 0) break;

                    if (subMenu > 0 && subMenu <= jumlahMenuNasi) {
                        strcat(orders, daftarMenuNasi[subMenu - 1].nama);
                        strcat(orders, "\n");
                        totalHarga += daftarMenuNasi[subMenu - 1].harga;
                    } else {
                        printf("Pilihan tidak valid.\n");
                    }

                    printf("\nApakah Kamu Ingin Mengulang Pesanan Kategori (Y / N): ");
                    scanf(" %c", &Konfirmasi);
                } while (Konfirmasi == 'Y' || Konfirmasi == 'y');
                break;

            case 2:
                int jumlahMenuAyam = sizeof(daftarMenuAyam) / sizeof(daftarMenuAyam[0]);
                clear_screen();
                printf("\nApakah Anda ingin mengurutkan menu?\n");
                printf("1. Berdasarkan Harga (Termurah ke Termahal)\n");
                printf("2. Berdasarkan Nama (A-Z)\n");
                printf("3. Tidak Perlu Sorting\n");
                printf("Masukkan Pilihan: ");
                scanf("%d", &pilihanSort);

                if (pilihanSort == 1) {
                    sortMenuByPrice(daftarMenuAyam, jumlahMenuAyam);
                } else if (pilihanSort == 2) {
                    sortMenuByName(daftarMenuAyam, jumlahMenuAyam);
                }

                do {
                    clear_screen();
                    printf("\nSilahkan Memilih Menu Ayam Berdasarkan Nomor:\n");
                    
                    for (int i = 0; i < jumlahMenuAyam; i++) {
                        printf("%d. %s : Rp%d\n", i + 1, daftarMenuAyam[i].nama, daftarMenuAyam[i].harga);
                    }
                    printf("Tolong Pilih Menu (Ketik 0 Untuk Keluar Kategori): ");
                    scanf("%d", &subMenu);

                    if (subMenu == 0) break;

                    if (subMenu > 0 && subMenu <= jumlahMenuAyam) {
                        strcat(orders, daftarMenuAyam[subMenu - 1].nama);
                        strcat(orders, "\n");
                        totalHarga += daftarMenuAyam[subMenu - 1].harga;
                    } else {
                        printf("Pilihan tidak valid.\n");
                    }

                    printf("\nApakah Kamu Ingin Mengulang Pesanan Kategori (Y / N): ");
                    scanf(" %c", &Konfirmasi);
                } while (Konfirmasi == 'Y' || Konfirmasi == 'y');
                break;
            
            case 3:
                int jumlahMenuSeafood = sizeof(daftarMenuSeafood) / sizeof(daftarMenuSeafood[0]);
                clear_screen();
                printf("\nApakah Anda ingin mengurutkan menu?\n");
                printf("1. Berdasarkan Harga (Termurah ke Termahal)\n");
                printf("2. Berdasarkan Nama (A-Z)\n");
                printf("3. Tidak Perlu Sorting\n");
                printf("Masukkan Pilihan: ");
                scanf("%d", &pilihanSort);

                if (pilihanSort == 1) {
                    sortMenuByPrice(daftarMenuSeafood, jumlahMenuSeafood);
                } else if (pilihanSort == 2) {
                    sortMenuByName(daftarMenuSeafood, jumlahMenuSeafood);
                }

                do {
                    clear_screen();
                    printf("\nSilahkan Memilih Menu Seafood Berdasarkan Nomor:\n");
                    
                    for (int i = 0; i < jumlahMenuSeafood; i++) {
                        printf("%d. %s : Rp%d\n", i + 1, daftarMenuSeafood[i].nama, daftarMenuSeafood[i].harga);
                    }
                    printf("Tolong Pilih Menu (Ketik 0 Untuk Keluar Kategori): ");
                    scanf("%d", &subMenu);

                    if (subMenu == 0) break;

                    if (subMenu > 0 && subMenu <= jumlahMenuSeafood) {
                        strcat(orders, daftarMenuSeafood[subMenu - 1].nama);
                        strcat(orders, "\n");
                        totalHarga += daftarMenuSeafood[subMenu - 1].harga;
                    } else {
                        printf("Pilihan tidak valid.\n");
                    }

                    printf("\nApakah Kamu Ingin Mengulang Pesanan Kategori (Y / N): ");
                    scanf(" %c", &Konfirmasi);
                } while (Konfirmasi == 'Y' || Konfirmasi == 'y');
                break;

            case 4:
                int jumlahMenuBebek = sizeof(daftarMenuBebek) / sizeof(daftarMenuBebek[0]);
                clear_screen();
                printf("\nApakah Anda ingin mengurutkan menu?\n");
                printf("1. Berdasarkan Harga (Termurah ke Termahal)\n");
                printf("2. Berdasarkan Nama (A-Z)\n");
                printf("3. Tidak Perlu Sorting\n");
                printf("Masukkan Pilihan: ");
                scanf("%d", &pilihanSort);

                if (pilihanSort == 1) {
                    sortMenuByPrice(daftarMenuBebek, jumlahMenuBebek);
                } else if (pilihanSort == 2) {
                    sortMenuByName(daftarMenuBebek, jumlahMenuBebek);
                }

                do {
                    clear_screen();
                    printf("\nSilahkan Memilih Menu Bebek Berdasarkan Nomor:\n");
                    
                    for (int i = 0; i < jumlahMenuBebek; i++) {
                        printf("%d. %s : Rp%d\n", i + 1, daftarMenuBebek[i].nama, daftarMenuBebek[i].harga);
                    }
                    printf("Tolong Pilih Menu (Ketik 0 Untuk Keluar Kategori): ");
                    scanf("%d", &subMenu);

                    if (subMenu == 0) break;

                    if (subMenu > 0 && subMenu <= jumlahMenuBebek) {
                        strcat(orders, daftarMenuBebek[subMenu - 1].nama);
                        strcat(orders, "\n");
                        totalHarga += daftarMenuBebek[subMenu - 1].harga;
                    } else {
                        printf("Pilihan tidak valid.\n");
                    }

                    printf("\nApakah Kamu Ingin Mengulang Pesanan Kategori (Y / N): ");
                    scanf(" %c", &Konfirmasi);
                } while (Konfirmasi == 'Y' || Konfirmasi == 'y');
                break;

            case 5:
                int jumlahMenuTahu = sizeof(daftarMenuTahu) / sizeof(daftarMenuTahu[0]);
                clear_screen();
                printf("\nApakah Anda ingin mengurutkan menu?\n");
                printf("1. Berdasarkan Harga (Termurah ke Termahal)\n");
                printf("2. Berdasarkan Nama (A-Z)\n");
                printf("3. Tidak Perlu Sorting\n");
                printf("Masukkan Pilihan: ");
                scanf("%d", &pilihanSort);

                if (pilihanSort == 1) {
                    sortMenuByPrice(daftarMenuTahu, jumlahMenuTahu);
                } else if (pilihanSort == 2) {
                    sortMenuByName(daftarMenuTahu, jumlahMenuTahu);
                }

                do {
                    clear_screen();
                    printf("\nSilahkan Memilih Menu Tahu Berdasarkan Nomor:\n");
                    
                    for (int i = 0; i < jumlahMenuTahu; i++) {
                        printf("%d. %s : Rp%d\n", i + 1, daftarMenuTahu[i].nama, daftarMenuTahu[i].harga);
                    }
                    printf("Tolong Pilih Menu (Ketik 0 Untuk Keluar Kategori): ");
                    scanf("%d", &subMenu);

                    if (subMenu == 0) break;

                    if (subMenu > 0 && subMenu <= jumlahMenuTahu) {
                        strcat(orders, daftarMenuTahu[subMenu - 1].nama);
                        strcat(orders, "\n");
                        totalHarga += daftarMenuTahu[subMenu - 1].harga;
                    } else {
                        printf("Pilihan tidak valid.\n");
                    }

                    printf("\nApakah Kamu Ingin Mengulang Pesanan Kategori (Y / N): ");
                    scanf(" %c", &Konfirmasi);
                } while (Konfirmasi == 'Y' || Konfirmasi == 'y');
                break;

            case 6:
                int jumlahMenuTempe = sizeof(daftarMenuTempe) / sizeof(daftarMenuTempe[0]);
                clear_screen();
                printf("\nApakah Anda ingin mengurutkan menu?\n");
                printf("1. Berdasarkan Harga (Termurah ke Termahal)\n");
                printf("2. Berdasarkan Nama (A-Z)\n");
                printf("3. Tidak Perlu Sorting\n");
                printf("Masukkan Pilihan: ");
                scanf("%d", &pilihanSort);

                if (pilihanSort == 1) {
                    sortMenuByPrice(daftarMenuTempe, jumlahMenuTempe);
                } else if (pilihanSort == 2) {
                    sortMenuByName(daftarMenuTempe, jumlahMenuTempe);
                }

                do {
                    clear_screen();
                    printf("\nSilahkan Memilih Menu Tempe Berdasarkan Nomor:\n");
                    
                    for (int i = 0; i < jumlahMenuTempe; i++) {
                        printf("%d. %s : Rp%d\n", i + 1, daftarMenuTempe[i].nama, daftarMenuTempe[i].harga);
                    }
                    printf("Tolong Pilih Menu (Ketik 0 Untuk Keluar Kategori): ");
                    scanf("%d", &subMenu);

                    if (subMenu == 0) break;

                    if (subMenu > 0 && subMenu <= jumlahMenuTempe) {
                        strcat(orders, daftarMenuTempe[subMenu - 1].nama);
                        strcat(orders, "\n");
                        totalHarga += daftarMenuTempe[subMenu - 1].harga;
                    } else {
                        printf("Pilihan tidak valid.\n");
                    }

                    printf("\nApakah Kamu Ingin Mengulang Pesanan Kategori (Y / N): ");
                    scanf(" %c", &Konfirmasi);
                } while (Konfirmasi == 'Y' || Konfirmasi == 'y');
                break;

            case 7:
                int jumlahMenuPerkedel = sizeof(daftarMenuPerkedel) / sizeof(daftarMenuPerkedel[0]);
                clear_screen();
                printf("\nApakah Anda ingin mengurutkan menu?\n");
                printf("1. Berdasarkan Harga (Termurah ke Termahal)\n");
                printf("2. Berdasarkan Nama (A-Z)\n");
                printf("3. Tidak Perlu Sorting\n");
                printf("Masukkan Pilihan: ");
                scanf("%d", &pilihanSort);

                if (pilihanSort == 1) {
                    sortMenuByPrice(daftarMenuPerkedel, jumlahMenuPerkedel);
                } else if (pilihanSort == 2) {
                    sortMenuByName(daftarMenuPerkedel, jumlahMenuPerkedel);
                }

                do {
                    clear_screen();
                    printf("\nSilahkan Memilih Menu Perkedel Berdasarkan Nomor:\n");

                    for (int i = 0; i < jumlahMenuPerkedel; i++) {
                        printf("%d. %s : Rp%d\n", i + 1, daftarMenuPerkedel[i].nama, daftarMenuPerkedel[i].harga);
                    }
                    printf("Tolong Pilih Menu (Ketik 0 Untuk Keluar Kategori): ");
                    scanf("%d", &subMenu);

                    if (subMenu == 0) break;

                    if (subMenu > 0 && subMenu <= jumlahMenuPerkedel) {
                        strcat(orders, daftarMenuPerkedel[subMenu - 1].nama);
                        strcat(orders, "\n");
                        totalHarga += daftarMenuPerkedel[subMenu - 1].harga;
                    } else {
                        printf("Pilihan tidak valid.\n");
                    }

                    printf("\nApakah Kamu Ingin Mengulang Pesanan Kategori (Y / N): ");
                    scanf(" %c", &Konfirmasi);
                } while (Konfirmasi == 'Y' || Konfirmasi == 'y');
                break;

            case 8:
                int jumlahMenuSayur = sizeof(daftarMenuSayur) / sizeof(daftarMenuSayur[0]);
                clear_screen();
                printf("\nApakah Anda ingin mengurutkan menu?\n");
                printf("1. Berdasarkan Harga (Termurah ke Termahal)\n");
                printf("2. Berdasarkan Nama (A-Z)\n");
                printf("3. Tidak Perlu Sorting\n");
                printf("Masukkan Pilihan: ");
                scanf("%d", &pilihanSort);

                if (pilihanSort == 1) {
                    sortMenuByPrice(daftarMenuSayur, jumlahMenuSayur);
                } else if (pilihanSort == 2) {
                    sortMenuByName(daftarMenuSayur, jumlahMenuSayur);
                }

                do {
                    clear_screen();
                    printf("\nSilahkan Memilih Menu Sayur Berdasarkan Nomor:\n");

                    for (int i = 0; i < jumlahMenuSayur; i++) {
                        printf("%d. %s : Rp%d\n", i + 1, daftarMenuSayur[i].nama, daftarMenuSayur[i].harga);
                    }
                    printf("Tolong Pilih Menu (Ketik 0 Untuk Keluar Kategori): ");
                    scanf("%d", &subMenu);

                    if (subMenu == 0) break;

                    if (subMenu > 0 && subMenu <= jumlahMenuSayur) {
                        strcat(orders, daftarMenuSayur[subMenu - 1].nama);
                        strcat(orders, "\n");
                        totalHarga += daftarMenuSayur[subMenu - 1].harga;
                    } else {
                        printf("Pilihan tidak valid.\n");
                    }

                    printf("\nApakah Kamu Ingin Mengulang Pesanan Kategori (Y / N): ");
                    scanf(" %c", &Konfirmasi);
                } while (Konfirmasi == 'Y' || Konfirmasi == 'y');
                break;

            case 9:
                int jumlahMenuMinuman = sizeof(daftarMenuMinuman) / sizeof(daftarMenuMinuman[0]);
                clear_screen();
                printf("\nApakah Anda ingin mengurutkan menu?\n");
                printf("1. Berdasarkan Harga (Termurah ke Termahal)\n");
                printf("2. Berdasarkan Nama (A-Z)\n");
                printf("3. Tidak Perlu Sorting\n");
                printf("Masukkan Pilihan: ");
                scanf("%d", &pilihanSort);

                if (pilihanSort == 1) {
                    sortMenuByPrice(daftarMenuMinuman, jumlahMenuMinuman);
                } else if (pilihanSort == 2) {
                    sortMenuByName(daftarMenuMinuman, jumlahMenuMinuman);
                }

                do {
                    clear_screen();
                    printf("\nSilahkan Memilih Menu Minuman Berdasarkan Nomor:\n");

                    for (int i = 0; i < jumlahMenuMinuman; i++) {
                        printf("%d. %s : Rp%d\n", i + 1, daftarMenuMinuman[i].nama, daftarMenuMinuman[i].harga);
                    }
                    printf("Tolong Pilih Menu (Ketik 0 Untuk Keluar Kategori): ");
                    scanf("%d", &subMenu);

                    if (subMenu == 0) break;

                    if (subMenu > 0 && subMenu <= jumlahMenuMinuman) {
                        strcat(orders, daftarMenuMinuman[subMenu - 1].nama);
                        strcat(orders, "\n");
                        totalHarga += daftarMenuMinuman[subMenu - 1].harga;
                    } else {
                        printf("Pilihan tidak valid.\n");
                    }

                    printf("\nApakah Kamu Ingin Mengulang Pesanan Kategori (Y / N): ");
                    scanf(" %c", &Konfirmasi);
                } while (Konfirmasi == 'Y' || Konfirmasi == 'y');
                break;

            case 10: 
                do{
                clear_screen();
                printf("\nPilih Kategori untuk mencari menu:\n");
                printf("1. Nasi\n");
                printf("2. Ayam\n");
                printf("3. Bebek\n");
                printf("4. Seafood\n");
                printf("5. Tahu\n");
                printf("6. Tempe\n");
                printf("7. Perkedel\n");
                printf("8. Sayur\n");
                printf("9. Minuman\n");
                printf("0. Kembali ke menu utama\n");
                printf("Masukkan pilihan kategori: ");
                int kategori;
                scanf("%d", &kategori);

                if (kategori == 0) break;

                char searchKey[50];
                printf("\nMasukkan nama menu yang ingin dicari: ");
                scanf(" %[^\n]s", searchKey);

                int index = -1;

                switch(kategori) {
                    case 1: 
                        index = binarySearch(daftarMenuNasi, sizeNasi, searchKey);
                        break;
                    case 2: 
                        index = binarySearch(daftarMenuAyam, sizeAyam, searchKey);
                        break;
                    case 3: 
                        index = binarySearch(daftarMenuBebek, sizeBebek, searchKey);
                        break;
                    case 4: 
                        index = binarySearch(daftarMenuSeafood, sizeSeafood, searchKey);
                        break;
                    case 5: 
                        index = binarySearch(daftarMenuTahu, sizeTahu, searchKey);
                        break;
                    case 6: 
                        index = binarySearch(daftarMenuTempe, sizeTempe, searchKey);
                        break;
                    case 7: 
                        index = binarySearch(daftarMenuPerkedel, sizePerkedel, searchKey);
                        break;
                    case 8: 
                        index = binarySearch(daftarMenuSayur, sizeSayur, searchKey);
                        break;
                    case 9: 
                        index = binarySearch(daftarMenuMinuman, sizeMinuman, searchKey);
                        break;
                    default:
                        printf("Kategori tidak valid!\n");
                        break;
                }

                if (index != -1) {
                    clear_screen();
                    printf("\nMenu ditemukan: %s, Harga: Rp%d\n", 
                        (kategori == 1 ? daftarMenuNasi[index].nama :
                        kategori == 2 ? daftarMenuAyam[index].nama :
                        kategori == 3 ? daftarMenuBebek[index].nama :
                        kategori == 4 ? daftarMenuSeafood[index].nama :
                        kategori == 5 ? daftarMenuTahu[index].nama :
                        kategori == 6 ? daftarMenuTempe[index].nama :
                        kategori == 7 ? daftarMenuPerkedel[index].nama :
                        kategori == 8 ? daftarMenuSayur[index].nama :
                        daftarMenuMinuman[index].nama),
                        (kategori == 1 ? daftarMenuNasi[index].harga :
                        kategori == 2 ? daftarMenuAyam[index].harga :
                        kategori == 3 ? daftarMenuBebek[index].harga :
                        kategori == 4 ? daftarMenuSeafood[index].harga :
                        kategori == 5 ? daftarMenuTahu[index].harga :
                        kategori == 6 ? daftarMenuTempe[index].harga :
                        kategori == 7 ? daftarMenuPerkedel[index].harga :
                        kategori == 8 ? daftarMenuSayur[index].harga :
                        daftarMenuMinuman[index].harga));
                    
                } else {
                    clear_screen();
                    printf("\nMenu tidak ditemukan.\n");
                }

                printf("Apakah Kembali ke Menu Utama ? (Y/N): ");
                scanf(" %c", &Konfirmasi);
                }while(Konfirmasi == 'Y' || Konfirmasi == 'y');
                break;

            case 11:
                clear_screen();
                printf("Terima kasih telah menggunakan aplikasi kami!\n");
                break;

            default:
                clear_screen();
                printf("Pilihan tidak valid.\n");
                break;
        }

        if (menuKategori != 11) {
            printf("\nApakah Anda ingin memesan dari kategori lain? (Y/N): ");
            scanf(" %c", &Konfirmasi);
        } else {
            Konfirmasi = 'N';
        }

    } while (Konfirmasi == 'Y' || Konfirmasi == 'y');

char total[50];
clear_screen();
sprintf(total, "\nTotal Harga: Rp%d\n", totalHarga);
strcat(receipt, orders);
strcat(receipt, total);

clear_screen();
printf("\n--- Bukti Pesanan Anda ---\n");
printf("%s", receipt);

writeReceipt(receipt, totalHarga); 

return 0;
}
